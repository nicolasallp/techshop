@inject CartState CartCounter

@code {
    [Parameter]
    public decimal SubTotal { get; set; }

    [Parameter]
    public bool isVisible { get; set; }

    [Parameter]
    public Action? onClose { get; set; }
}

@if (isVisible)
{
    <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-25">
        <div class="flex w-fit flex-col">
            <button class="place-self-start text-xl font-semibold text-white" @onclick="onClose!">X</button>
            <div class="bg-white p-4">
                <EditForm FormName="OrderForm" Model="Model" >
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <div class="w-full">
                            <label for="address1" class="mb-2 block text-sm font-medium text-gray-700">Address Line 1<span class="ml-2 text-red-500">*</span></label>
                            <InputText @bind-Value="Model.Address1" type="text" id="street" class="block w-full border border-gray-300 bg-gray-50 p-2.5 text-gray-800"/>
                            <ValidationMessage For="() => Model.Address1" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="address2" class="mb-2 block text-sm font-medium text-gray-700">Address Line 2</label>
                        <InputText @bind-Value="Model.Address2" type="text" id="address2" class="block w-full border border-gray-300 bg-gray-50 p-2.5 text-gray-800" />
                        <ValidationMessage For="() => Model.Address2" />
                    </div>
                    <div class="flex gap-3">
                        <div class="mb-3 w-full">
                            <div class="w-full">
                                <label for="city" class="mb-2 block text-sm font-medium text-gray-700">City<span class="ml-2 text-red-500">*</span></label>
                                <InputText @bind-Value="Model.City" type="text" id="city" class="block w-full border border-gray-300 bg-gray-50 p-2.5 text-gray-800" />
                                <ValidationMessage For="() => Model.City" />
                            </div>
                        </div>
                        <div class="mb-3 w-full">
                            <label for="state" class="mb-2 block text-sm font-medium text-gray-700">State / Province<span class="ml-2 text-red-500">*</span></label>
                            <InputText @bind-Value="Model.State" type="text" id="state" class="block w-full border border-gray-300 bg-gray-50 p-2.5 text-gray-800" />
                            <ValidationMessage For="() => Model.State" />
                        </div>
                        <div class="mb-3 w-full">
                            <label for="zip" class="mb-2 block text-sm font-medium text-gray-700">ZIP / Postal Code<span class="ml-2 text-red-500">*</span></label>
                            <InputText @bind-Value="Model.PostalCode" type="text" id="zip" class="block w-full border border-gray-300 bg-gray-50 p-2.5 text-gray-800" />
                            <ValidationMessage For="() => Model.PostalCode" />
                        </div>
                    </div>
                    <hr class="mb-4 mt-2" />
                    <div class="my-6 w-[300px]">
                        <div class="flex justify-between text-gray-700">
                            <p>Subtotal:</p>
                            <span>$@SubTotal</span>
                        </div>
                        <hr class="my-2" />
                        <div class="flex justify-between text-gray-700">
                            <p>Delivery fee:</p>
                            <span>$8.59</span>
                        </div>
                        <hr class="my-2" />
                        <div class="mb-3 flex justify-between">
                            <p class="font-bold text-gray-800">Total:</p>
                            <span class="font-bold text-gray-800">$@(SubTotal + 8.59m)</span>
                        </div>
                    </div>
                    <button type="submit" class="w-full bg-blue-700 px-5 py-2.5 text-center text-sm font-medium text-white hover:bg-blue-600 active:bg-blue-800">Finish order</button>
                </EditForm>
            </div>

        </div>
    </div>
}

@code {
    [SupplyParameterFromForm]
    public OrderViewModel Model { get; set; } = new();

    [Parameter]
    public List<CartProduct>? CartProducts { get; set; }

    [Parameter]
    public string? UserId { get; set; }

    private async Task FinishOrder()
    {
        foreach (CartProduct cartProduct in CartProducts!)
        {
            string data = JsonConvert.SerializeObject(new Order
            {
                ProductId = cartProduct.ProductId,
                UserId = UserId,
                Quantity = cartProduct.Quantity
            });

            await ApiRequest.CreateData(RequestURL.Orders, data);

            await ApiRequest.DeleteData(RequestURL.CartProducts, cartProduct.Id!);
            CartProducts = await ApiRequest.GetData<CartProduct>(RequestURL.CartProducts, UserId!);
            CartCounter.SendCount(CartProducts?.Count ?? 0);
        }

        string addressData = JsonConvert.SerializeObject(new User
        {
            Address1 = Model.Address1,
            Address2 = Model.Address2,
            City = Model.City,
            State = Model.State,
            PostalCode = Model.PostalCode
        });
        await ApiRequest.UpdateData(RequestURL.Users, UserId!, addressData);
    }
}