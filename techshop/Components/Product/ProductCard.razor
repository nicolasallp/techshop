@using techshop.Components.Layout
@inject NavigationManager NavigationManager
@inject CartDI CartCounter

<div class="m-4 bg-gray-50">
    <div class="h-fit w-[300px] border border-gray-300 hover:border-blue-600">
        <a href="ProductInfo/@Product!.Id">
            <div>
                <img class="m-auto size-[200px] object-contain" src='@($"{RequestURL.Resources}/{Product.Image}")' alt="product image" />
            </div>
            <div class="mb-2 px-5">
                <h5 class="mb-1 font-semibold tracking-tight text-[16px] text-gray-700">@Product.Name</h5>
                <div class="flex justify-between">
                    <span class="text-lg font-bold text-gray-900">$@Product.Price</span>
                    <Rating Average="4" Count="695" />
                </div>
            </div>
        </a>
    </div>
    <div class="flex">
        <AuthorizeView>
            <Authorized>
                <button @onclick="AddToCart" class="w-full @(IsInCart ? "bg-gray-200 text-blue-700 hover:bg-gray-300" : "bg-blue-700 text-white hover:bg-blue-600") py-3.5 text-center text-sm font-medium focus:outline-offset-2 focus:outline-black">@(IsInCart ? "Added to cart" : "Add to cart")</button>
            </Authorized>
            <NotAuthorized>
                <button @onclick='() => NavigationManager.NavigateTo("Login")' class="w-full bg-blue-700 py-3.5 text-center text-sm font-medium text-white hover:bg-blue-600 focus:outline-offset-2 focus:outline-black">Add to cart</button>
            </NotAuthorized>
        </AuthorizeView>

    </div>
</div>

@code {
    [Parameter]
    public Product? Product { get; set; }

    [Parameter]
    public int AuthenticatedUserId { get; set; }

    [Parameter]
    public Cart? CartProduct { get; set; }

    [Parameter]
    public bool IsInCart { get; set; }

    List<Cart>? CartProducts;

    private async void AddToCart()
    {

        if (IsInCart && CartProduct != null)
        {
            IsInCart = false;
            await ApiRequest.DeleteData(RequestURL.Carts, CartProduct!.Id);
            CartProducts = await ApiRequest.GetData<Cart>(RequestURL.Carts, AuthenticatedUserId);
            CartCounter.SendCount(CartProducts?.Count ?? 0);
            return;
        }

        IsInCart = true;
        string data = JsonConvert.SerializeObject(new Cart
            {
                UserId = AuthenticatedUserId,
                ProductId = Product!.Id,
                Quantity = 1
            });


        await ApiRequest.PostData(RequestURL.Carts, data);
        CartProducts = await ApiRequest.GetData<Cart>(RequestURL.Carts, AuthenticatedUserId);
        CartCounter.SendCount(CartProducts?.Count ?? 0);
        CartProduct = CartProducts!.Where(p => p.ProductId == Product!.Id).FirstOrDefault();
        return;
    }
}