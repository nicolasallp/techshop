@page "/Cart/{UserId}"
@rendermode InteractiveServer
@inject IHttpContextAccessor accessor
@inject NavigationManager navigation
@inject CartState CartCounter

@code {
    bool showModal;
}

<PageTitle>My Cart | TechShop</PageTitle>

<base href="/" />

<div class="flex w-[1250px] flex-col items-center bg-white">
    <h1 class="mt-8 text-xl font-semibold text-blue-950">
        @(CartProducts != null ? (CartProducts.Count > 0 ? "My cart" : "Cart is empty") : "")
    </h1>
    <div class="h-full">
        @if (CartProducts != null)
        {
            if (CartProducts.Count > 0)
            {
                foreach (CartProduct cart in CartProducts)
                {
                    <CartProductCard CartProduct="cart" OnCartDelete="DeleteCartProduct" OnQuantityUpdate="UpdateQuantity" />

                }
                <div class="mb-6 flex items-center justify-between">
                    <div class="w-[300px] text-sm">
                        <div class="flex justify-between text-gray-700">
                            <p>Subtotal:</p>
                            <span>$@Math.Round(subTotal, 2)</span>
                        </div>
                        <hr class="my-2" />
                        <div class="flex justify-between text-gray-700">
                            <p>Delivery fee:</p>
                            <span>$8.59</span>
                        </div>
                        <hr class="my-2" />
                        <div class="mb-3 flex justify-between">
                            <p class="font-bold text-gray-800">Total:</p>
                            <span class="font-bold text-gray-800">$@Math.Round(subTotal + 8.59m,2)</span>
                        </div>
                        <button class="bg-blue-700 px-3 py-2.5 text-center text-sm font-medium text-white hover:bg-blue-600 active:bg-blue-800" @onclick="() => showModal = true">Proceed to checkout</button>
                    </div>
                </div>
            }
        }
    </div>
</div>
<OrderModal CartProducts=@CartProducts UserId=@UserId SubTotal="Math.Round(subTotal, 2)" isVisible="@showModal" OnClose="CloseModal" />

@code {
    [Parameter]
    public string? UserId { get; set; }

    private List<CartProduct>? CartProducts;
    private decimal subTotal = 0;

    protected override async Task OnInitializedAsync()
    {
        if (!accessor.HttpContext!.User.Identity!.IsAuthenticated)
        {
            navigation.NavigateTo("/Login", true);
            return;
        }

        if (UserId != accessor.HttpContext?.User.FindFirstValue("UserId")) {
            navigation.NavigateTo($"/Cart/{accessor.HttpContext?.User.FindFirstValue("UserId")}", true);
            return;
        }

        CartProducts = await ApiRequest.GetData<CartProduct>(RequestURL.CartProducts, UserId!) ?? new();
        CartProducts!.ForEach(c => subTotal += c.Product!.Price * c.Quantity);
    }

    private async Task UpdateQuantity(decimal quantity)
    {
        subTotal = 0;
        CartProducts = await ApiRequest.GetData<CartProduct>(RequestURL.CartProducts, UserId!);
        CartProducts!.ForEach(c => subTotal += c.Product!.Price * c.Quantity);
    }

    private async Task DeleteCartProduct(string id)
    {
        await ApiRequest.DeleteData(RequestURL.CartProducts, id);
        CartProducts = await ApiRequest.GetData<CartProduct>(RequestURL.CartProducts, UserId!);
        CartCounter.SendCount(CartProducts?.Count ?? 0);
    }

    private async Task CloseModal()
    {
        showModal = false;
        CartProducts = await ApiRequest.GetData<CartProduct>(RequestURL.CartProducts, UserId!); 
    }
}